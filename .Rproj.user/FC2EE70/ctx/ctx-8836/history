outcome_data <- data[,1]
# Model fit
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
# Model fit
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
devtools::build()
devtools::document()
# Model fit
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
library(SRCL)
############ C++ main results #################
library(SRCL)
# Data simulation
set.seed(12345678)
data <- SRCL_motivating_example(40000)
# Code data monotonisticly
lm(Y~.,data)
recode <- lm(Y~.,data)$coefficients<0
for (i in 2:ncol(data)) {
if(recode[i]==T) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
if(recode[i]==T) data[,i] = 1 - data[,i]
}
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
############ C++ main results #################
library(SRCL)
# Data simulation
set.seed(12345678)
data <- SRCL_motivating_example(40000)
# Code data monotonisticly
lm(Y~.,data)
recode <- lm(Y~.,data)$coefficients<0
for (i in 2:ncol(data)) {
if(recode[i]==T) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
if(recode[i]==T) data[,i] = 1 - data[,i]
}
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
SRCL::SRCL_train_neural_network()
?train_mode
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures")
############ C++ main results #################
library(SRCL)
# Data simulation
set.seed(12345678)
data <- SRCL_motivating_example(40000)
# Code data monotonisticly
lm(Y~.,data)
recode <- lm(Y~.,data)$coefficients<0
for (i in 2:ncol(data)) {
if(recode[i]==T) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
if(recode[i]==T) data[,i] = 1 - data[,i]
}
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
.Call(,SRCL)
train_network_relu()
train_network_relu(exposure_data)
train_network_relu(exposure_data,out)
train_network_relu(exposure_data,outcome_data)
train_network_relu(exposure_data,outcome_data,exposure_data,outcome_data)
train_network_relu(x=as.matrix(exposure_data),y=as.matrix(outcome_data),testx=as.matrix(exposure_data),testy=as.matrix(outcome_data),lr = 0.01, maxepochs  = 50, W1_input = model[[1]],B1_input = model[[2]],W2_input = model[[3]],B2_input = model[[4]])
performance <- c(performance,model$train_performance)
train_network_relu(x=as.matrix(exposure_data),y=as.matrix(outcome_data),testx=as.matrix(exposure_data),testy=as.matrix(outcome_data),lr = 0.01, maxepochs  = 50, W1_input = model[[1]],B1_input = model[[2]],W2_input = model[[3]],B2_input = model[[4]])
useDynLib("SRCL")
install.packages("devtools")
train_network_relu(x=as.matrix(exposure_data),y=as.matrix(outcome_data),testx=as.matrix(exposure_data),testy=as.matrix(outcome_data),lr = 0.01, maxepochs  = 50, W1_input = model[[1]],B1_input = model[[2]],W2_input = model[[3]],B2_input = model[[4]])
useDynLib("SRCL")
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures")
############ C++ main results #################
library(SRCL)
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
############ C++ main results #################
library(SRCL)
# Data simulation
set.seed(12345678)
data <- SRCL_motivating_example(40000)
# Code data monotonisticly
lm(Y~.,data)
recode <- lm(Y~.,data)$coefficients<0
for (i in 2:ncol(data)) {
if(recode[i]==T) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
if(recode[i]==T) data[,i] = 1 - data[,i]
}
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
############ C++ main results #################
library(SRCL)
# Data simulation
set.seed(12345678)
data <- SRCL_motivating_example(40000)
# Code data monotonisticly
lm(Y~.,data)
recode <- lm(Y~.,data)$coefficients<0
for (i in 2:ncol(data)) {
if(recode[i]==T) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
if(recode[i]==T) data[,i] = 1 - data[,i]
}
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
# Data simulation
set.seed(12345678)
data <- SRCL_motivating_example(100) # use 40 000 to replicate the paper
# Code data monotonisticly
lm(Y~.,data)
recode <- lm(Y~.,data)$coefficients<0
for (i in 2:ncol(data)) {
if(recode[i]==T) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
if(recode[i]==T) data[,i] = 1 - data[,i]
}
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures")  ############## REMOVE
par(mfrow=c(1,3))
# Performance
plot(model$train_performance, type='l',yaxs='i', ylab="Mean squared error",xlab="Epochs",main="Performance")
# Model visualisation
SRCL_plot_neural_network(model,names(exposure_data),5)
# AUC
library(pROC)
pred <- SRCL_predict_risks(exposure_data,model)
plot(roc(outcome_data,pred),print.auc=TRUE)
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
############ C++ main results #################
library(SRCL)
# Data simulation
set.seed(12345678)
data <- SRCL_0_motivating_example(100) # use 40 000 to replicate the paper
# Code data monotonisticly
lm(Y~.,data)
recode <- lm(Y~.,data)$coefficients<0
for (i in 2:ncol(data)) {
if(recode[i]==TRUE) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
if(recode[i]==TRUE) data[,i] = 1 - data[,i]
}
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures")  ############## REMOVE
par(mfrow=c(1,3))
# Performance
plot(model$train_performance, type='l',yaxs='i', ylab="Mean squared error",xlab="Epochs",main="Performance")
# Model visualisation
SRCL_plot_neural_network(model,names(exposure_data),5)
# Model visualisation
SRCL_3_plot_neural_network(model,names(exposure_data),5)
# AUC
library(pROC)
pred <- SRCL_predict_risks(exposure_data,model)
pred <- SRCL_4_predict_risks(exposure_data,model)
plot(roc(outcome_data,pred),print.auc=TRUE)
# Risk contributions
r_c <- SRCL_5_layerwise_relevance_propagation(exposure_data,model)
# Clustering
library(fastcluster)
p_d <- hclust(dist(r_c),"ward.D")
groups = 3
clus = cutree(p_d, groups)
library(robustbase)
par(mfrow=c(2,2)) # The combined plot plus one elaborative plot for each group
par(mar=c(4,12,3,4))
plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',axes=FALSE,ylab="Risk",xlab="Exposed",frame.plot=FALSE,main="Combined plot")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
rect(0,0,1,1)
prev0 = 0; total = 0
colours <- c("grey","dodgerblue","red","orange","green")
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
par(mar=c(3,10,5,3))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
boxplot(r_c[clus==i,],horizontal = T,las=2, outline = F , range = 0.000000001,col=colours[i])
title(paste0("Elaborated plot - sub-group ",i,"\n",sum(clus==i)," (prev=",round(prev*100,1),"%, risk=",round(risk*100),"%,\nexcess=",round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),"%, observed risk=",round(risk_obs*100),"%)"),col.main=colours[i])
}
dev.off()   ############## REMOVE
plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',axes=FALSE,ylab="Risk",xlab="Exposed",frame.plot=FALSE,main="Combined plot")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
rect(0,0,1,1)
prev0 = 0; total = 0
colours <- c("grey","dodgerblue","red","orange","green")
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
par(mfrow=c(2,2)) # The combined plot plus one elaborative plot for each group
par(mar=c(4,12,3,4))
plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',axes=FALSE,ylab="Risk",xlab="Exposed",frame.plot=FALSE,main="Combined plot")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
rect(0,0,1,1)
prev0 = 0; total = 0
colours <- c("grey","dodgerblue","red","orange","green")
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
par(mar=c(3,10,5,3))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
boxplot(r_c[clus==i,],horizontal = T,las=2, outline = F , range = 0.000000001,col=colours[i])
title(paste0("Elaborated plot - sub-group ",i,"\n",sum(clus==i)," (prev=",round(prev*100,1),"%, risk=",round(risk*100),"%,\nexcess=",round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),"%, observed risk=",round(risk_obs*100),"%)"),col.main=colours[i])
}
dev.off()   ############## REMOVE
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper")
plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',axes=FALSE,ylab="Risk",xlab="Exposed",frame.plot=FALSE,main="Combined plot")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
rect(0,0,1,1)
prev0 = 0; total = 0
colours <- c("grey","dodgerblue","red","orange","green")
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
par(mar=c(3,10,5,3))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
boxplot(r_c[clus==i,],horizontal = T,las=2, outline = F , range = 0.000000001,col=colours[i])
title(paste0("Elaborated plot - sub-group ",i,"\n",sum(clus==i)," (prev=",round(prev*100,1),"%, risk=",round(risk*100),"%,\nexcess=",round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),"%, observed risk=",round(risk_obs*100),"%)"),col.main=colours[i])
library(robustbase)
par(mfrow=c(2,2)) # The combined plot plus one elaborative plot for each group
par(mar=c(4,12,3,4))
plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',axes=FALSE,ylab="Risk",xlab="Exposed",frame.plot=FALSE,main="Combined plot")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
rect(0,0,1,1)
prev0 = 0; total = 0
colours <- c("grey","dodgerblue","red","orange","green")
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
par(mar=c(3,10,5,3))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
boxplot(r_c[clus==i,],horizontal = T,las=2, outline = F , range = 0.000000001,col=colours[i])
title(paste0("Elaborated plot - sub-group ",i,"\n",sum(clus==i)," (prev=",round(prev*100,1),"%, risk=",round(risk*100),"%,\nexcess=",round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),"%, observed risk=",round(risk_obs*100),"%)"),col.main=colours[i])
}
library(robustbase)
par(mfrow=c(2,2)) # The combined plot plus one elaborative plot for each group
par(mar=c(4,12,3,4))
plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',axes=FALSE,ylab="Risk",xlab="Exposed",frame.plot=FALSE,main="Combined plot")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
rect(0,0,1,1)
prev0 = 0; total = 0
colours <- c("grey","dodgerblue","red","orange","green")
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
par(mar=c(3,10,5,3))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
boxplot(r_c[clus==i,],horizontal = T,las=2, outline = F , range = 0.000000001,col=colours[i])
title(paste0("Elaborated plot - sub-group ",i,"\n",sum(clus==i)," (prev=",round(prev*100,1),"%, risk=",round(risk*100),"%,\nexcess=",round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),"%, observed risk=",round(risk_obs*100),"%)"),col.main=colours[i])
}
library(SRCL)
library(SRCL)
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
#' Function used as part of another functions
#'
#' Function used as part of another functions
#'
#' @param r rows in matrix
#' @param c columns in matrix
#' @param v mean
#' @export
relu <- function(input) {
#  return(ifelse(input<0,0,input))
return((input>0)*input)
}
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
library(SRCL)
library(SRCL)
srcl
library(SRCL)
library(SRCL)
library(SRCL)
library(SRCL)
library(SRCL)
?prcomp
library(SRCL)
devtools::install_github("ekstroem/SRCL")
library(SRCL)
library(graphics)
colours <- c("grey","dodgerblue","red","orange","green")
# Data simulation
set.seed(12345678)
data <- SRCL_0_motivating_example(100) # use 40 000 to replicate the paper
# Code data monotonisticly
lm(Y~.,data)
recode <- lm(Y~.,data)$coefficients<0
for (i in 2:ncol(data)) {
if(recode[i]==TRUE) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
if(recode[i]==TRUE) data[,i] = 1 - data[,i]
}
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
par(mfrow=c(1,3))
# Performance
plot(model$train_performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="Performance")
# Model visualisation
SRCL_3_plot_neural_network(model,names(exposure_data),5)
# AUC
library(pROC)
pred <- SRCL_4_predict_risks(exposure_data,model)
plot(roc(outcome_data,pred),print.auc=TRUE)
# Risk contributions
r_c <- SRCL_5_layerwise_relevance_propagation(exposure_data,model)
# Clustering
summary(prcomp(r_c))
plot(prcomp(r_c))
plot(prcomp(r_c)$x[,1:2])
# Depending on the number of influencial principal components
# (In this example, the two first principal components are used)
d_r_c <- as.data.frame(prcomp(r_c)$x[,1:2])
library(fastcluster)
p_d <- hclust(dist(d_r_c),"ward.D")
groups = 4
clus = cutree(p_d, groups)
plot(prcomp(r_c)$x[,1:2],col=colours[clus])
# Plot results
library(robustbase)
layout(matrix(c(1,2,3,3,4,4,5,5,6,6,7,7), 3, 4, byrow = TRUE))
par(mar=c(4,5,3,0))
plot(prcomp(r_c),main="PCA: Proportion of variance")
plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=FALSE)
par(mar=c(4,12,3,4))
plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',
axes=FALSE,ylab="Risk",xlab="Exposed",frame.plot=FALSE,main="Combined plot")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
rect(0,0,1,1)
prev0 = 0; total = 0
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
par(mar=c(3,10,5,3))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
boxplot(r_c[clus==i,],horizontal = TRUE,las=2, outline = FALSE ,
range = 0.000000001,col=colours[i])
title(paste0("Elaborated plot - sub-group ",i,"\n",sum(clus==i),
" (prev=",round(prev*100,1),"%, risk=",round(risk*100),
"%,\nexcess=",round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),
"%, observed risk=",round(risk_obs*100),"%)"),col.main=colours[i])
}
library(SRCL)
?SRCL_1_initiate_neural_network
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
?SRCL_1_initiate_neural_network
library(SRCL)
?SRCL_1_initiate_neural_network
library(SRCL)
library(SRCL)
?SRCL_1_initiate_neural_network
library(SRCL)
?SRCL_1_initiate_neural_network
remove.packages("SRCL", lib="~/R/win-library/3.6")
library(SRCL)
?SRCL_1_initiate_neural_network
?SRCL_1_initiate_neural_network
library(SRCL)
?SRCL_1_initiate_neural_network
library(SRCL)
?SRCL_2_train_neural_network
library(SRCL)
?SRCL_2_train_neural_network
library(SRCL)
?SRCL_2_train_neural_network
library(SRCL)
?SRCL_2_train_neural_network
library(SRCL)
library(SRCL)
?SRCL_2_train_neural_network
install.packages("poLCA")
install.packages("rtools")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
