
n = 1000
id = 1:n
e_m <- .5
e_y <- .1
m_y <- .3

e <- sample(1:0,n,replace = T)
m <- NULL
for (i in 1:n) {
  p <-0.2+e_m*e[i]
  m[i] <- sample(1:0,1,prob = c(p,1-p)) }
y <- NULL
for (i in 1:n) {
  p <- 0.1+e_y*e[i]+m_y*m[i]
  y[i] <- sample(1:0,1,prob = c(p,1-p)) }
data <- data.frame(id,e,m,y)

# Controlled
summary(lm(y~e))
e_y + e_m*m_y
summary(lm(y~e+m))
e_y
m_y

# natural medflex
fit.glm <- glm(m ~ as.factor(e), data = data, family = binomial())
weightData <- neWeight(fit.glm) #, nRep = 2) # Hvorfor kan man s?tte flere nRep
weightData$w <- weights(weightData)
weightData$id_ <- 1:nrow(weightData)
weightFit1r <- neModel(y ~ as.factor(e0) + as.factor(e1), expData = weightData, se = "robust")
summary(weightFit1r)
neEffdecomp(weightFit1r)
e_y # direkte
e_m*m_y # indirekte




# recalculate IPW
data$ps <- predict(glm(e~1),type="response", family=binomial())
stab <- mean(data$e)
data$ipw <- ifelse(data$e == 1,stab / data$ps, (1-stab) / (1-data$ps))
mean(data$ipw)
# recalcualte ratio of-mediator probability weights  
data$e_ <- data$e
data_org <- data
data2 <- data
data2$e_ <- 1 - data2$e
data <- rbind(data,data2)
data <- data[order(data$id),]
fit_m <- glm(m ~ e, data = data_org,family=binomial())
data$psm_ <- predict(fit_m, newdata=data.frame(e = data$e_),type="response")
data$psm <- predict(fit_m, newdata=data.frame(e = data$e),type="response")

#data$mr <- data$psm_ / data$psm
data$mr <- ifelse(data$m == 1 ,data$psm_ / data$psm, (1-data$psm_) / (1-data$psm))
data$w_s <- data$mr * data$ipw
mean(data$w_s)
data$id_ <- 1:nrow(data)
data$PNR_model_ <- weightData$id_
data$PNR_model <- weightData$id
data$w <- weightData$w
data$e0 <- weightData$e0
data$e1 <- weightData$e1

weightFit1r <- neModel(y ~ as.factor(e0) + as.factor(e1), expData = weightData, se = "robust")
summary(weightFit1r)
neEffdecomp(weightFit1r)
e_y # direkte
e_m*m_y # indirekte
summary(lm(y~as.factor(e0)+as.factor(e1),weights = w, data = weightData))
summary(lm(y~as.factor(e)+as.factor(e_),weights = w_s, data = data))



