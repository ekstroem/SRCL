library(pROC)
par(mar=c(5,5,2,0))
pred <- SRCL_4_predict_risks(exposure_data,model)
plot(roc(outcome_data,pred),print.auc=TRUE,main="C) Accuracy")
# Plot results
library(robustbase)
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
plot(im,axes=F)
# par(mar=c(4,5,3,0))
# plot(prcomp(r_c),main="PCA: Proportion of variance")
# plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=FALSE)
par(mar=c(4,5,2,1))
plot(0,0,type='n',xlim=c(0,1),ylim=c(0,max(pred)),xaxs='i',yaxs='i',
axes=FALSE,ylab="Risk",xlab="Prevalence",frame.plot=FALSE,main="E) Prevalence and mean risk of sub-groups")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.05))
rect(0,0,1,1)
prev0 = 0; total = 0
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
#arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
arrows(x0=0,x1=1,y0=mean(r_c$Baseline_risk),lty=1,length=0)
st <- 1
d <- data.frame(matrix(NA, nrow=ncol(r_c)))
for (g in 1:groups) {
for (i in 1:nrow(d)) {
#    d[i,g] <- median(r_c[clus==g,i])
d[i,g] <- mean(r_c[clus==g,i])
}}
d <- t(d)
rownames(d) <- paste("Group",1:groups)
colnames(d) <- names(r_c)
par(mar=c(0,0,0,0))
plot(0,0,type='n',xlim=c(-ncol(d)-6,0),ylim=c(-nrow(d)-1,1),axes=F)
text(c(-ncol(d)):c(-1),0,rev(colnames(d)),srt=25,cex=st)
text(-ncol(d)-6,0,"F) Mean risk contributions by sub-group (SD)\n[mean risk contribution if other exposures are set to 0]",pos=4,cex=st)
#text(-ncol(d)-2,c(-1):c(-nrow(d)),rownames(d),col=colours[1:groups],cex=st)
#par(mfrow=c(1,1))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
text(-ncol(d)-6,-i,paste0("Sub-group ",i,": ","n=",sum(clus==i),", e=",sum(outcome_data[clus==i]),",Prev=",format(round(prev*100,1),nsmall=1),"%, risk=",format(round(risk*100,1),nsmall=1),"%,\nexcess=",
#round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),
format(round(prev*(risk-mean(r_c$Baseline_risk))/total*100,1),nsmall=1),
"%, Obs risk=",format(round(risk_obs*100,1),nsmall=1),"% (",
#                     "round(risk_obs*100),
paste0(format(round(prop.test(sum(outcome_data[clus==i]),length(t(outcome_data)[clus==i]))$conf.int*100,1),nsmall=1),collapse="-"),
"%)\n",
"Risk based on the sum of individual effects =",
format(round(mean(SRCL_6_sum_of_individual_effects(exposure_data,model)[clus==i])*100,1),nsmall=1),
"%"),pos=4,col=colours[i])
#  ex_mat[run,i] <- prev*(risk-mean(r_c$Baseline_risk))/total*100
}
m <- max(d)
ind_effect_matrix <- SRCL_6_individual_effects_matrix(exposure_data,model)
for(g in 1:ncol(d)) { for (i in 1:nrow(d)){
value <- paste0(format(round(as.numeric(d[i,g])*100,1),nsmall=),"%\n(",
format(round(sd(r_c[clus==i,g])*100,1),nsmall=1),"%)\n[",
format(round(mean(ind_effect_matrix[clus==i,g]*100),1),nsmall=1),"%]"
)
#  value <- paste0(format(round(as.numeric(quantile(d[i,g],c(0.25,0.75))),2),nsmall=2),collapse = "-")
text(-g,-i,value,col=adjustcolor(colours[i],d[i,g]/m),cex=st*d[i,g]/m)
}}
#mtext(paste0("SG1= ",round(mean(data$Y[data$Air_pollution==1&data$Mutation_X==1])*100,1),"%, ",
#             "SG2= ",round(mean(data$Y[data$Physically_active==0&data$LDL==1&data$Night_shifts==1])*100,1),"%"),side=1,line=-1,cex=.7)
dev.off()
for (lr_set in c(1e-4,1e-5,1e-6)) {
#      for (lr_set in c(1e-4)) {
print(paste0("############################## Learning rate: ",lr_set," ##############################"))
model <- SRCL_2_train_neural_network(X_train = exposure_data_train, Y_train = outcome_data_train,
X_test = exposure_data_test, Y_test = outcome_data_test,
model,lr = lr_set, epochs=2000,
patience = 100,plot_and_evaluation_frequency = 50,
L1 =0.00007) # L1 default = 0.00001
# epochs = 2000
}
# Risk contributions
r_c <- SRCL_5_layerwise_relevance_propagation(exposure_data_test,model)
sum(duplicated(r_c)==FALSE)
# # Clustering
# groups =3
#   library(fastcluster)
# hc <- hclust(dist(r_c), method="ward.D2") # RAM memory intensive
# clus <- cutree(hc, groups)
# p <- cbind(r_c,clus)
# p <- plyr::count(p)
# pfreq <- p$freq
# pclus <- p$clus
# p <- p[,-c(ncol(p)-1,ncol(p))]
# p <- hclust(dist(p),method = "ward.D2", members=pfreq)
#
# #
# library(WeightedCluster)
# hc <- hclust(dist(r_c), method="centroid") # RAM memory intensive
# clus <- cutree(hc, groups)
# p <- cbind(r_c,clus)
# p <- plyr::count(p)
# pfreq <- p$freq
# pclus <- p$clus
# p <- p[,-c(ncol(p)-1,ncol(p))]
# p <- hclust(dist(p),method = "centroid", members=pfreq)
# ppclus <- cutree(p, groups)
# cbind(pclus,ppclus)
# #
#
#
# # # Clustering 500 -> groups
# data(iris)
# iris <- round(iris[,1:4])
# groups =3
# library(fastcluster)
# p <- plyr::count(iris)
# pfreq <- p$freq
# p <- p[,-ncol(p)]
# phc <- hclust(dist(p,method = "manhattan"),method = "ward.D", members=pfreq)
# clus_aggre <- cutree(phc, groups) # Gruppering paa aggregeret data
# id <- 1:nrow(iris)
# temp <- merge(cbind(id,iris),cbind(p,clus_aggre))
# clus_new <- temp$clus_aggre[order(temp$id)]
#
# hc <- hclust(dist(iris,method = "manhattan"), method="ward.D") #ward.D
# clus <- cutree(hc, groups) # Gruppering paa al data
# table(clus,clus_new)
# View(data.frame(cbind(iris,clus,clus_new)))
# # Resultater stemmer ikke overens...
# Clustering - using aggregated data - USED - but seems to fail witn noise data.
groups = 3
library(fastcluster)
p <- cbind(r_c)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclust(dist(p, method = "manhattan"),method = "ward.D", members=pfreq)
pclus <- cutree(p_h_c, groups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
# hc <- hclust(dist(r_c, method = "manhattan"),method = "ward.D")
# clus_test <- cutree(hc, groups) # Gruppering p? al data
# table(clus,clus_test)
# groups =3
# library(fastcluster)
# hc <- hclust(dist(r_c, method = "manhattan"),method = "ward.D")
# clus <- cutree(hc, groups)
par(mfrow=c(1,1))
par(mar=c(5,5,5,5))
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle("D) Dendrogram") +
theme(plot.title = element_text(size = 15, face = "bold")))
dev.off()
# append the clusters to the full risk contribution matrix
png(paste0("SCL_hiddennodes_",hidden_nodes,"_noise_",add_noise,"_run_",run,".png"),unit="in",res=300,width = 7,height = 8)  ############## REMOVE
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,7,7,7,7), 3, 6, byrow = TRUE))
# Performance - trian
par(mar=c(5,5,2,0))
plot(model$train_performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="A) Performance - train")
# Performance - test
par(mar=c(5,5,2,0))
plot(model$test_performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="A) Performance - test")
# Model visualisation
par(mar=c(0,0,0,0))
SRCL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "C) Model")
# AUC
library(pROC)
par(mar=c(5,5,2,0))
pred <- SRCL_4_predict_risks(exposure_data,model)
plot(roc(outcome_data,pred),print.auc=TRUE,main="C) Accuracy")
# Plot results
library(robustbase)
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
plot(im,axes=F)
# par(mar=c(4,5,3,0))
# plot(prcomp(r_c),main="PCA: Proportion of variance")
# plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=FALSE)
par(mar=c(4,5,2,1))
plot(0,0,type='n',xlim=c(0,1),ylim=c(0,max(pred)),xaxs='i',yaxs='i',
axes=FALSE,ylab="Risk",xlab="Prevalence",frame.plot=FALSE,main="E) Prevalence and mean risk of sub-groups")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.05))
rect(0,0,1,1)
prev0 = 0; total = 0
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
#arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
arrows(x0=0,x1=1,y0=mean(r_c$Baseline_risk),lty=1,length=0)
st <- 1
d <- data.frame(matrix(NA, nrow=ncol(r_c)))
for (g in 1:groups) {
for (i in 1:nrow(d)) {
#    d[i,g] <- median(r_c[clus==g,i])
d[i,g] <- mean(r_c[clus==g,i])
}}
d <- t(d)
rownames(d) <- paste("Group",1:groups)
colnames(d) <- names(r_c)
par(mar=c(0,0,0,0))
plot(0,0,type='n',xlim=c(-ncol(d)-6,0),ylim=c(-nrow(d)-1,1),axes=F)
text(c(-ncol(d)):c(-1),0,rev(colnames(d)),srt=25,cex=st)
text(-ncol(d)-6,0,"F) Mean risk contributions by sub-group (SD)\n[mean risk contribution if other exposures are set to 0]",pos=4,cex=st)
#text(-ncol(d)-2,c(-1):c(-nrow(d)),rownames(d),col=colours[1:groups],cex=st)
#par(mfrow=c(1,1))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
text(-ncol(d)-6,-i,paste0("Sub-group ",i,": ","n=",sum(clus==i),", e=",sum(outcome_data[clus==i]),",Prev=",format(round(prev*100,1),nsmall=1),"%, risk=",format(round(risk*100,1),nsmall=1),"%,\nexcess=",
#round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),
format(round(prev*(risk-mean(r_c$Baseline_risk))/total*100,1),nsmall=1),
"%, Obs risk=",format(round(risk_obs*100,1),nsmall=1),"% (",
#                     "round(risk_obs*100),
paste0(format(round(prop.test(sum(outcome_data[clus==i]),length(t(outcome_data)[clus==i]))$conf.int*100,1),nsmall=1),collapse="-"),
"%)\n",
"Risk based on the sum of individual effects =",
format(round(mean(SRCL_6_sum_of_individual_effects(exposure_data,model)[clus==i])*100,1),nsmall=1),
"%"),pos=4,col=colours[i])
#  ex_mat[run,i] <- prev*(risk-mean(r_c$Baseline_risk))/total*100
}
m <- max(d)
ind_effect_matrix <- SRCL_6_individual_effects_matrix(exposure_data,model)
for(g in 1:ncol(d)) { for (i in 1:nrow(d)){
value <- paste0(format(round(as.numeric(d[i,g])*100,1),nsmall=),"%\n(",
format(round(sd(r_c[clus==i,g])*100,1),nsmall=1),"%)\n[",
format(round(mean(ind_effect_matrix[clus==i,g]*100),1),nsmall=1),"%]"
)
#  value <- paste0(format(round(as.numeric(quantile(d[i,g],c(0.25,0.75))),2),nsmall=2),collapse = "-")
text(-g,-i,value,col=adjustcolor(colours[i],d[i,g]/m),cex=st*d[i,g]/m)
}}
#mtext(paste0("SG1= ",round(mean(data$Y[data$Air_pollution==1&data$Mutation_X==1])*100,1),"%, ",
#             "SG2= ",round(mean(data$Y[data$Physically_active==0&data$LDL==1&data$Night_shifts==1])*100,1),"%"),side=1,line=-1,cex=.7)
dev.off()
# Risk contributions
r_c <- SRCL_5_layerwise_relevance_propagation(exposure_data,model)
sum(duplicated(r_c)==FALSE)
# # Clustering
# groups =3
#   library(fastcluster)
# hc <- hclust(dist(r_c), method="ward.D2") # RAM memory intensive
# clus <- cutree(hc, groups)
# p <- cbind(r_c,clus)
# p <- plyr::count(p)
# pfreq <- p$freq
# pclus <- p$clus
# p <- p[,-c(ncol(p)-1,ncol(p))]
# p <- hclust(dist(p),method = "ward.D2", members=pfreq)
#
# #
# library(WeightedCluster)
# hc <- hclust(dist(r_c), method="centroid") # RAM memory intensive
# clus <- cutree(hc, groups)
# p <- cbind(r_c,clus)
# p <- plyr::count(p)
# pfreq <- p$freq
# pclus <- p$clus
# p <- p[,-c(ncol(p)-1,ncol(p))]
# p <- hclust(dist(p),method = "centroid", members=pfreq)
# ppclus <- cutree(p, groups)
# cbind(pclus,ppclus)
# #
#
#
# # # Clustering 500 -> groups
# data(iris)
# iris <- round(iris[,1:4])
# groups =3
# library(fastcluster)
# p <- plyr::count(iris)
# pfreq <- p$freq
# p <- p[,-ncol(p)]
# phc <- hclust(dist(p,method = "manhattan"),method = "ward.D", members=pfreq)
# clus_aggre <- cutree(phc, groups) # Gruppering paa aggregeret data
# id <- 1:nrow(iris)
# temp <- merge(cbind(id,iris),cbind(p,clus_aggre))
# clus_new <- temp$clus_aggre[order(temp$id)]
#
# hc <- hclust(dist(iris,method = "manhattan"), method="ward.D") #ward.D
# clus <- cutree(hc, groups) # Gruppering paa al data
# table(clus,clus_new)
# View(data.frame(cbind(iris,clus,clus_new)))
# # Resultater stemmer ikke overens...
# Clustering - using aggregated data - USED - but seems to fail witn noise data.
groups = 3
library(fastcluster)
p <- cbind(r_c)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclust(dist(p, method = "manhattan"),method = "ward.D", members=pfreq)
pclus <- cutree(p_h_c, groups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
# hc <- hclust(dist(r_c, method = "manhattan"),method = "ward.D")
# clus_test <- cutree(hc, groups) # Gruppering p? al data
# table(clus,clus_test)
# groups =3
# library(fastcluster)
# hc <- hclust(dist(r_c, method = "manhattan"),method = "ward.D")
# clus <- cutree(hc, groups)
par(mfrow=c(1,1))
par(mar=c(5,5,5,5))
library(ggtree)
library(ggplot2)
png("dendrogram.png",units = 'in',res=300,height = 4,width = 4)
print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle("D) Dendrogram") +
theme(plot.title = element_text(size = 15, face = "bold")))
dev.off()
# append the clusters to the full risk contribution matrix
png(paste0("SCL_hiddennodes_",hidden_nodes,"_noise_",add_noise,"_run_",run,".png"),unit="in",res=300,width = 7,height = 8)  ############## REMOVE
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,7,7,7,7), 3, 6, byrow = TRUE))
# Performance - trian
par(mar=c(5,5,2,0))
plot(model$train_performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="A) Performance - train")
# Performance - test
par(mar=c(5,5,2,0))
plot(model$test_performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="A) Performance - test")
# Model visualisation
par(mar=c(0,0,0,0))
SRCL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "C) Model")
# AUC
library(pROC)
par(mar=c(5,5,2,0))
pred <- SRCL_4_predict_risks(exposure_data,model)
plot(roc(outcome_data,pred),print.auc=TRUE,main="C) Accuracy")
# Plot results
library(robustbase)
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
plot(im,axes=F)
# par(mar=c(4,5,3,0))
# plot(prcomp(r_c),main="PCA: Proportion of variance")
# plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=FALSE)
par(mar=c(4,5,2,1))
plot(0,0,type='n',xlim=c(0,1),ylim=c(0,max(pred)),xaxs='i',yaxs='i',
axes=FALSE,ylab="Risk",xlab="Prevalence",frame.plot=FALSE,main="E) Prevalence and mean risk of sub-groups")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.05))
rect(0,0,1,1)
prev0 = 0; total = 0
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
#arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
arrows(x0=0,x1=1,y0=mean(r_c$Baseline_risk),lty=1,length=0)
st <- 1
d <- data.frame(matrix(NA, nrow=ncol(r_c)))
for (g in 1:groups) {
for (i in 1:nrow(d)) {
#    d[i,g] <- median(r_c[clus==g,i])
d[i,g] <- mean(r_c[clus==g,i])
}}
d <- t(d)
rownames(d) <- paste("Group",1:groups)
colnames(d) <- names(r_c)
par(mar=c(0,0,0,0))
plot(0,0,type='n',xlim=c(-ncol(d)-6,0),ylim=c(-nrow(d)-1,1),axes=F)
text(c(-ncol(d)):c(-1),0,rev(colnames(d)),srt=25,cex=st)
text(-ncol(d)-6,0,"F) Mean risk contributions by sub-group (SD)\n[mean risk contribution if other exposures are set to 0]",pos=4,cex=st)
#text(-ncol(d)-2,c(-1):c(-nrow(d)),rownames(d),col=colours[1:groups],cex=st)
#par(mfrow=c(1,1))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
text(-ncol(d)-6,-i,paste0("Sub-group ",i,": ","n=",sum(clus==i),", e=",sum(outcome_data[clus==i]),",Prev=",format(round(prev*100,1),nsmall=1),"%, risk=",format(round(risk*100,1),nsmall=1),"%,\nexcess=",
#round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),
format(round(prev*(risk-mean(r_c$Baseline_risk))/total*100,1),nsmall=1),
"%, Obs risk=",format(round(risk_obs*100,1),nsmall=1),"% (",
#                     "round(risk_obs*100),
paste0(format(round(prop.test(sum(outcome_data[clus==i]),length(t(outcome_data)[clus==i]))$conf.int*100,1),nsmall=1),collapse="-"),
"%)\n",
"Risk based on the sum of individual effects =",
format(round(mean(SRCL_6_sum_of_individual_effects(exposure_data,model)[clus==i])*100,1),nsmall=1),
"%"),pos=4,col=colours[i])
#  ex_mat[run,i] <- prev*(risk-mean(r_c$Baseline_risk))/total*100
}
m <- max(d)
ind_effect_matrix <- SRCL_6_individual_effects_matrix(exposure_data,model)
for(g in 1:ncol(d)) { for (i in 1:nrow(d)){
value <- paste0(format(round(as.numeric(d[i,g])*100,1),nsmall=),"%\n(",
format(round(sd(r_c[clus==i,g])*100,1),nsmall=1),"%)\n[",
format(round(mean(ind_effect_matrix[clus==i,g]*100),1),nsmall=1),"%]"
)
#  value <- paste0(format(round(as.numeric(quantile(d[i,g],c(0.25,0.75))),2),nsmall=2),collapse = "-")
text(-g,-i,value,col=adjustcolor(colours[i],d[i,g]/m),cex=st*d[i,g]/m)
}}
#mtext(paste0("SG1= ",round(mean(data$Y[data$Air_pollution==1&data$Mutation_X==1])*100,1),"%, ",
#             "SG2= ",round(mean(data$Y[data$Physically_active==0&data$LDL==1&data$Night_shifts==1])*100,1),"%"),side=1,line=-1,cex=.7)
dev.off()
png(paste0("SCL_hiddennodes_",hidden_nodes,"_noise_",add_noise,"_run_",run,".png"),unit="in",res=300,width = 7,height = 8)  ############## REMOVE
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,7,7,7,7), 3, 6, byrow = TRUE))
# Performance - trian
par(mar=c(5,5,2,0))
plot(model$train_performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="A) Performance - train")
# Performance - test
par(mar=c(5,5,2,0))
plot(model$test_performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="A) Performance - test")
# Model visualisation
par(mar=c(0,0,0,0))
SRCL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]), title = "C) Model")
# AUC
library(pROC)
par(mar=c(5,5,2,0))
pred <- SRCL_4_predict_risks(exposure_data,model)
plot(roc(outcome_data,pred),print.auc=TRUE,main="C) Accuracy")
# Plot results
library(robustbase)
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
plot(im,axes=F)
# par(mar=c(4,5,3,0))
# plot(prcomp(r_c),main="PCA: Proportion of variance")
# plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=FALSE)
par(mar=c(4,5,2,1))
plot(0,0,type='n',xlim=c(0,1),ylim=c(0,max(pred)),xaxs='i',yaxs='i',
axes=FALSE,ylab="Risk",xlab="Prevalence",frame.plot=FALSE,main="E) Prevalence and mean risk of sub-groups")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.05))
rect(0,0,1,1)
prev0 = 0; total = 0
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
#arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
arrows(x0=0,x1=1,y0=mean(r_c$Baseline_risk),lty=1,length=0)
st <- 1
d <- data.frame(matrix(NA, nrow=ncol(r_c)))
for (g in 1:groups) {
for (i in 1:nrow(d)) {
#    d[i,g] <- median(r_c[clus==g,i])
d[i,g] <- mean(r_c[clus==g,i])
}}
d <- t(d)
rownames(d) <- paste("Group",1:groups)
colnames(d) <- names(r_c)
par(mar=c(0,0,0,0))
plot(0,0,type='n',xlim=c(-ncol(d)-6,0),ylim=c(-nrow(d)-1,1),axes=F)
text(c(-ncol(d)):c(-1),0,rev(colnames(d)),srt=25,cex=st)
text(-ncol(d)-6,0,"F) Mean risk contributions by sub-group (SD)\n[mean risk contribution if other exposures are set to 0]",pos=4,cex=st)
#text(-ncol(d)-2,c(-1):c(-nrow(d)),rownames(d),col=colours[1:groups],cex=st)
#par(mfrow=c(1,1))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
text(-ncol(d)-6,-i,paste0("Sub-group ",i,": ","n=",sum(clus==i),", e=",sum(outcome_data[clus==i]),",Prev=",format(round(prev*100,1),nsmall=1),"%, risk=",format(round(risk*100,1),nsmall=1),"%,\nexcess=",
#round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),
format(round(prev*(risk-mean(r_c$Baseline_risk))/total*100,1),nsmall=1),
"%, Obs risk=",format(round(risk_obs*100,1),nsmall=1),"% (",
#                     "round(risk_obs*100),
paste0(format(round(prop.test(sum(outcome_data[clus==i]),length(t(outcome_data)[clus==i]))$conf.int*100,1),nsmall=1),collapse="-"),
"%)\n",
"Risk based on the sum of individual effects =",
format(round(mean(SRCL_6_sum_of_individual_effects(exposure_data,model)[clus==i])*100,1),nsmall=1),
"%"),pos=4,col=colours[i])
#  ex_mat[run,i] <- prev*(risk-mean(r_c$Baseline_risk))/total*100
}
m <- max(d)
ind_effect_matrix <- SRCL_6_individual_effects_matrix(exposure_data,model)
for(g in 1:ncol(d)) { for (i in 1:nrow(d)){
value <- paste0(format(round(as.numeric(d[i,g])*100,1),nsmall=),"%\n(",
format(round(sd(r_c[clus==i,g])*100,1),nsmall=1),"%)\n[",
format(round(mean(ind_effect_matrix[clus==i,g]*100),1),nsmall=1),"%]"
)
#  value <- paste0(format(round(as.numeric(quantile(d[i,g],c(0.25,0.75))),2),nsmall=2),collapse = "-")
text(-g,-i,value,col=adjustcolor(colours[i],d[i,g]/m),cex=st*d[i,g]/m)
}}
mtext(paste0("SG1= ",round(mean(data$Y[data$Air_pollution==1&data$Mutation_X==1])*100,1),"%, ",
"SG2= ",round(mean(data$Y[data$Physically_active==0&data$LDL==1&data$Night_shifts==1])*100,1),"%"),side=1,line=-1,cex=.7)
dev.off()
