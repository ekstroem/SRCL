
# Scope run - c++

setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures")

############ C++ main results #################
library(SRCL)
library(graphics)
colours <- c("grey","dodgerblue","red","orange","green")


# Data simulation
    set.seed(123456789)
    data <- SRCL_0_motivating_example(1000) # use 40 000 to replicate the paper

# Code data monotonisticly
    lm(Y~.,data)
    recode <- lm(Y~.,data)$coefficients<0
    for (i in 2:ncol(data)) {
      if(recode[i]==TRUE) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
      if(recode[i]==TRUE) data[,i] = 1 - data[,i]
    }
    summary(lm(Y~.,data))
    exposure_data <- data[,-1]
    outcome_data <- data[,1]

# Model fit
    model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
    for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
      model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
               lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
    }

    
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures")  ############## REMOVE
png("motivating_network.png",unit="in",res=300,width = 10,height = 4)  ############## REMOVE
par(mfrow=c(1,3))

    # Performance
      plot(model$train_performance, type='l',yaxs='i', ylab="Mean squared error",xlab="Epochs",main="Performance")

    # Model visualisation
      SRCL_3_plot_neural_network(model,names(exposure_data),5)

    # AUC
      library(pROC)
      pred <- SRCL_4_predict_risks(exposure_data,model)
      plot(roc(outcome_data,pred),print.auc=TRUE)

dev.off()  ############## REMOVE

# Risk contributions
  r_c <- SRCL_5_layerwise_relevance_propagation(exposure_data,model)


  # Clustering
  summary(prcomp(r_c))
  plot(prcomp(r_c))
  plot(prcomp(r_c)$x[,1:2])
  d_r_c <- as.data.frame(prcomp(r_c)$x[,1:2])
  library(fastcluster)
  p_d <- hclust(dist(d_r_c),"ward.D")
  groups = 4
  clus = cutree(p_d, groups)
  plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=F)

# Plot results
png("SCL.png",unit="in",res=300,width = 10,height = 10)  ############## REMOVE
        library(robustbase)
        #par(mfrow=c(2,2)) # The combined plot plus one elaborative plot for each group
        layout(matrix(c(1,2,3,3,4,4,5,5,6,6,7,7), 3, 4, byrow = TRUE))
        par(mar=c(4,5,3,0))
        plot(prcomp(r_c),main="PCA: Proportion of variance")
        plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=F)
        par(mar=c(4,12,3,4))
        plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',axes=FALSE,ylab="Risk",xlab="Exposed",frame.plot=FALSE,main="Combined plot")
        axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
        rect(0,0,1,1)
        prev0 = 0; total = 0
        colours <- c("grey","dodgerblue","red","orange","green")
        for (i in 1:groups) {
          prev <- sum(clus==i)/length(clus)
          risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
          rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
          prev0 = prev + prev0
          total = total + risk * prev
        }
        arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
        par(mar=c(3,10,5,3))
        for (i in 1:groups) {
          prev <- sum(clus==i)/length(clus)
          risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
          risk_obs <- mean(outcome_data[clus==i])
          boxplot(r_c[clus==i,],horizontal = TRUE,las=2, outline = FALSE , range = 0.000000001,col=colours[i])
          title(paste0("Elaborated plot - sub-group ",i,"\n","n=",sum(clus==i),", e=",sum(outcome_data[clus==i])," (prev=",round(prev*100,1),"%, risk=",round(risk*100),"%,\nexcess=",round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),
          "%,obs risk=",
  #                     "round(risk_obs*100),
                       paste0(round(prop.test(sum(outcome_data[clus==i]),length(t(outcome_data)[clus==i]))$conf.int*100,2),collapse="-"),
                       "%)"),col.main=colours[i])
        }
dev.off()   ############## REMOVE






setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper")
save.image("demo.RData")
load("demo.RData")





####################### Controlling away a confounder - EXAMPLE ########################
gen_data <- function(n) {
  data <- data.frame(V1 = sample(0:1,n,replace = T))
  for (i in 1:15) {
    data[,i] <- sample(0:1,n,replace = TRUE, prob = c(0.7,0.3))
  }
  summary(data)

  C = as.numeric(sample(0:1,n,replace=TRUE,prob = c(0.5,0.5)))

  for (i in 1:nrow(data)) {
    if (C[i]==1 & sample(0:1,1,prob = c(0.7,0.3))==1) {
      data[i,2] <- 1
    } }

  for (i in 1:nrow(data)) {
    if (C[i]==1 & sample(0:1,1,prob = c(0.8,0.2))==1) {
      data[i,12] <- 1
    } }

  data$Y <-  sample(0:1,n,replace = T, prob = c(0.95,0.05))

  for (i in 1:nrow(data)) {
    if (C[i]==1 & sample(0:1,1,prob = c(0.8,0.2))==1) {
      data$Y[i] <- 1
    } }
  for (i in 1:nrow(data)) {
    if (data[i,10]==1 & sample(0:1,1,prob = c(0.95,0.05))==1) {
      data$Y[i] <- 1
    } }

  for(i in 1:ncol(data)) {
    data[,i] <- as.numeric(data[,i])
  }

  data$C <- C
  data <- data[,c(16,1:15,17)]

  return(data)
}

library(SRCL)
data <- gen_data(10000)
c <- data$C
data <- data[,-ncol(data)]

# Code data monotonisticly
lm(Y~.,data)
recode <- lm(Y~.,data)$coefficients<0
for (i in 2:ncol(data)) {
  if(recode[i]==TRUE) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
  if(recode[i]==TRUE) data[,i] = 1 - data[,i]
}
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]

# Model fit without the confounder
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
  model <- SRCL_train_neural_network(exposure_data,outcome_data,model,
                                     lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
# Model visualisation
SRCL_plot_neural_network(model,names(exposure_data),5)
# Should only be influenced by V10...


# Model fit with the confounder
model <- SRCL_initiate_neural_network(inputs=ncol(exposure_data),hidden=5,confounder=TRUE)
for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
  model <- SRCL_train_neural_network_with_confounder(exposure_data,outcome_data,c,model,
                                     lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
}
SRCL_plot_neural_network(model,names(exposure_data),5)
# Only information comes from V10 now.




############ C++ repeated #################
for (run in 101:150) {
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo_PCA_20200419")

  library(SRCL)
  library(graphics)
  
  # Data simulation
  data <- SRCL_0_motivating_example(40000) # use 40 000 to replicate the paper
  
  # Code data monotonisticly
  lm(Y~.,data)
  recode <- lm(Y~.,data)$coefficients<0
  for (i in 2:ncol(data)) {
    if(recode[i]==TRUE) colnames(data)[i] <- paste0("Not_",colnames(data)[i])
    if(recode[i]==TRUE) data[,i] = 1 - data[,i]
  }
  summary(lm(Y~.,data))
  exposure_data <- data[,-1]
  outcome_data <- data[,1]
  
  # Model fit
  model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
  for (lr_set in c(0.01,0.001,0.0001,0.00001)) {
    model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
                                         lr = lr_set, epochs=1000,patience = 10,plot_and_evaluation_frequency = 50)
  }
  
  # Risk contributions
  r_c <- SRCL_5_layerwise_relevance_propagation(exposure_data,model)
  
  
  # Clustering
  summary(prcomp(r_c))
  plot(prcomp(r_c))
  plot(prcomp(r_c)$x[,1:2])
  d_r_c <- as.data.frame(prcomp(r_c)$x[,1:2])
  library(fastcluster)
#  p_d <- hclust(dist(d_r_c),"ward.D")
  p_d <- hclust(dist(d_r_c),"average")
  
  groups = 4
  clus = cutree(p_d, groups)
  plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=F)
  
  # Plot results
  png(paste0("SCL_",run,".png"),unit="in",res=300,width = 10,height = 10)  ############## REMOVE
  library(robustbase)
  colours <- c("grey","dodgerblue","red","orange","green")
  #par(mfrow=c(2,2)) # The combined plot plus one elaborative plot for each group
  layout(matrix(c(1,2,3,3,4,4,5,5,6,6,7,7), 3, 4, byrow = TRUE))
  par(mar=c(4,5,3,0))
  plot(prcomp(r_c),main="PCA: Proportion of variance")
  plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=F)
  par(mar=c(4,12,3,4))
  plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',axes=FALSE,ylab="Risk",xlab="Exposed",frame.plot=FALSE,main="Combined plot")
  axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
  rect(0,0,1,1)
  prev0 = 0; total = 0
  colours <- c("grey","dodgerblue","red","orange","green")
  for (i in 1:groups) {
    prev <- sum(clus==i)/length(clus)
    risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
    rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
    prev0 = prev + prev0
    total = total + risk * prev
  }
  arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
  par(mar=c(3,10,5,3))
  for (i in 1:groups) {
    prev <- sum(clus==i)/length(clus)
    risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
    risk_obs <- mean(outcome_data[clus==i])
    boxplot(r_c[clus==i,],horizontal = TRUE,las=2, outline = FALSE , range = 0.000000001,col=colours[i])
    title(paste0("Elaborated plot - sub-group ",i,"\n","n=",sum(clus==i),", e=",sum(outcome_data[clus==i])," (prev=",round(prev*100,1),"%, risk=",round(risk*100),"%,\nexcess=",round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),
                 "%,obs risk=",
                 #                     "round(risk_obs*100),
                 paste0(round(prop.test(sum(outcome_data[clus==i]),length(t(outcome_data)[clus==i]))$conf.int*100,2),collapse="-"),
                 "%)"),col.main=colours[i])
  }
  dev.off()   ############## REMOVE
  
  
  
  
  
  
  
}



