mtext("B)",side=3, line=2,adj = -.0001)
# AUC
library(pROC)
par(mar=c(5,5,2,0))
pred <- SRCL_4_predict_risks(exposure_data,model)
plot(roc(outcome_data,pred),print.auc=TRUE,main="C) Accuracy")
# Plot results
library(robustbase)
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
plot(im,axes=F)
# par(mar=c(4,5,3,0))
# plot(prcomp(r_c),main="PCA: Proportion of variance")
# plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=FALSE)
par(mar=c(4,5,2,1))
plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',
axes=FALSE,ylab="Risk",xlab="Prevalence",frame.plot=FALSE,main="E) Prevalence and mean risk of sub-groups")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
rect(0,0,1,1)
prev0 = 0; total = 0
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
#arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
arrows(x0=0,x1=1,y0=mean(r_c$Baseline_risk),lty=1,length=0)
st <- 1.5
d <- data.frame(matrix(NA, nrow=ncol(r_c)))
for (g in 1:groups) {
for (i in 1:nrow(d)) {
#    d[i,g] <- median(r_c[clus==g,i])
d[i,g] <- mean(r_c[clus==g,i])
}}
d <- t(d)
rownames(d) <- paste("Group",1:groups)
colnames(d) <- names(r_c)
par(mar=c(0,0,0,0))
plot(0,0,type='n',xlim=c(-ncol(d)-5,0),ylim=c(-nrow(d)-1,1),axes=F)
text(c(-ncol(d)):c(-1),0,rev(colnames(d)),srt=25,cex=st)
text(-ncol(d)-5,0,"F) Mean (SD) risk contributions\nby sub-group",pos=4,cex=st)
#text(-ncol(d)-2,c(-1):c(-nrow(d)),rownames(d),col=colours[1:groups],cex=st)
#par(mfrow=c(1,1))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
text(-ncol(d)-5,-i,paste0("Sub-group ",i,": ","n=",sum(clus==i),", e=",sum(outcome_data[clus==i]),",\nPrev=",format(round(prev*100,1),nsmall=1),"%, risk=",format(round(risk*100,1),nsmall=1),"%, excess=",
#round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),
format(round(prev*(risk-mean(r_c$Baseline_risk))/total*100,1),nsmall=1),
"%,\nObs risk=",format(round(risk_obs*100,1),nsmall=1),"% (",
#                     "round(risk_obs*100),
paste0(format(round(prop.test(sum(outcome_data[clus==i]),length(t(outcome_data)[clus==i]))$conf.int*100,1),nsmall=1),collapse="-"),
"%)",
"\nSG1= ",round(mean(data$Y[data$Air_pollution==1&data$Mutation_X==1])*100,1),"%, ",
"SG2= ",round(mean(data$Y[data$Not_physically_active==1&data$LDL==1&data$Night_shifts==1])*100,1),"%"
),pos=4,col=colours[i])
}
m <- max(d)
for(g in 1:ncol(d)) { for (i in 1:nrow(d)){
value <- paste0(format(round(as.numeric(d[i,g]),2),nsmall=2),"\n(",
format(round(sd(r_c[clus==i,g]),2),nsmall=2),")")
#  value <- paste0(format(round(as.numeric(quantile(d[i,g],c(0.25,0.75))),2),nsmall=2),collapse = "-")
text(-g,-i,value,col=adjustcolor(colours[i],d[i,g]/m),cex=st*d[i,g]/m)
}}
library(SRCL)
library(graphics)
colours <- c("grey","dodgerblue","red","orange","green")
# Data simulation
data <- SRCL_0_synthetic_data(40000) # use 40 000 to replicate the paper
IPCW = rep(1,nrow(data))
IPCW = ifelse(data$Y==1, 100, 1)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
# Data simulation
data <- SRCL_0_synthetic_data(20000) # use 40 000 to replicate the paper
IPCW = rep(1,nrow(data))
IPCW = ifelse(data$Y==1, 100, 1)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
names(data)[2] <- "Not_physically_active"
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
# Risk contributions
r_c <- SRCL_5_layerwise_relevance_propagation(exposure_data,model)
sum(duplicated(r_c)==FALSE)
# Clustering
groups =3
library(fastcluster)
p <- cbind(r_c)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclust(dist(p, method = "manhattan"),method = "ward.D", members=pfreq)
pclus <- cutree(p_h_c, groups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
par(mfrow=c(1,1))
par(mar=c(5,5,5,5))
library(ggtree)
library(ggplot2)
print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle("D) Dendrogram") +
theme(plot.title = element_text(size = 15, face = "bold")))
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE))
# Performance
par(mar=c(5,5,2,0))
plot(model$train_performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="A) Performance")
# Model visualisation
par(mar=c(0,0,0,0))
SRCL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]))
mtext("B)",side=3, line=2,adj = -.0001)
# AUC
library(pROC)
par(mar=c(5,5,2,0))
pred <- SRCL_4_predict_risks(exposure_data,model)
plot(roc(outcome_data,pred),print.auc=TRUE,main="C) Accuracy")
# Plot results
library(robustbase)
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
plot(im,axes=F)
# par(mar=c(4,5,3,0))
# plot(prcomp(r_c),main="PCA: Proportion of variance")
# plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=FALSE)
par(mar=c(4,5,2,1))
plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',
axes=FALSE,ylab="Risk",xlab="Prevalence",frame.plot=FALSE,main="E) Prevalence and mean risk of sub-groups")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
rect(0,0,1,1)
prev0 = 0; total = 0
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
#arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
arrows(x0=0,x1=1,y0=mean(r_c$Baseline_risk),lty=1,length=0)
st <- 1.5
d <- data.frame(matrix(NA, nrow=ncol(r_c)))
for (g in 1:groups) {
for (i in 1:nrow(d)) {
#    d[i,g] <- median(r_c[clus==g,i])
d[i,g] <- mean(r_c[clus==g,i])
}}
d <- t(d)
rownames(d) <- paste("Group",1:groups)
colnames(d) <- names(r_c)
par(mar=c(0,0,0,0))
plot(0,0,type='n',xlim=c(-ncol(d)-5,0),ylim=c(-nrow(d)-1,1),axes=F)
text(c(-ncol(d)):c(-1),0,rev(colnames(d)),srt=25,cex=st)
text(-ncol(d)-5,0,"F) Mean (SD) risk contributions\nby sub-group",pos=4,cex=st)
#text(-ncol(d)-2,c(-1):c(-nrow(d)),rownames(d),col=colours[1:groups],cex=st)
#par(mfrow=c(1,1))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
text(-ncol(d)-5,-i,paste0("Sub-group ",i,": ","n=",sum(clus==i),", e=",sum(outcome_data[clus==i]),",\nPrev=",format(round(prev*100,1),nsmall=1),"%, risk=",format(round(risk*100,1),nsmall=1),"%, excess=",
#round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),
format(round(prev*(risk-mean(r_c$Baseline_risk))/total*100,1),nsmall=1),
"%,\nObs risk=",format(round(risk_obs*100,1),nsmall=1),"% (",
#                     "round(risk_obs*100),
paste0(format(round(prop.test(sum(outcome_data[clus==i]),length(t(outcome_data)[clus==i]))$conf.int*100,1),nsmall=1),collapse="-"),
"%)",
"\nSG1= ",round(mean(data$Y[data$Air_pollution==1&data$Mutation_X==1])*100,1),"%, ",
"SG2= ",round(mean(data$Y[data$Not_physically_active==1&data$LDL==1&data$Night_shifts==1])*100,1),"%"
),pos=4,col=colours[i])
}
m <- max(d)
for(g in 1:ncol(d)) { for (i in 1:nrow(d)){
value <- paste0(format(round(as.numeric(d[i,g]),2),nsmall=2),"\n(",
format(round(sd(r_c[clus==i,g]),2),nsmall=2),")")
#  value <- paste0(format(round(as.numeric(quantile(d[i,g],c(0.25,0.75))),2),nsmall=2),collapse = "-")
text(-g,-i,value,col=adjustcolor(colours[i],d[i,g]/m),cex=st*d[i,g]/m)
}}
setwd("C:/Users/lvb917/Google Drev/gdrive - SCL/Manuscripts/Epi paper/Figures/Redo")
library(SRCL)
library(graphics)
colours <- c("grey","dodgerblue","red","orange","green")
# Data simulation
data <- SRCL_0_synthetic_data(20000) # use 40 000 to replicate the paper
IPCW = rep(1,nrow(data))
IPCW = ifelse(data$Y==1, 100, 0.001)
# Code data monotonisticly
lm(Y~.,data)
# Data simulation
data <- SRCL_0_synthetic_data(40000) # use 40 000 to replicate the paper
IPCW = rep(1,nrow(data))
IPCW = ifelse(data$Y==1, 100, 0.001)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
names(data)[2] <- "Not_physically_active"
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
IPCW = rep(1,nrow(data))
IPCW = ifelse(data$Y==1, 100, 0.01)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
names(data)[2] <- "Not_physically_active"
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
# Data simulation
data <- SRCL_0_synthetic_data(40000) # use 40 000 to replicate the paper
IPCW = rep(1,nrow(data))
IPCW = ifelse(data$Y==1, 10, 0.01)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
names(data)[2] <- "Not_physically_active"
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
# Data simulation
data <- SRCL_0_synthetic_data(40000) # use 40 000 to replicate the paper
IPCW = rep(1,nrow(data))
IPCW = ifelse(data$Y==1, 10, 0.1)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
names(data)[2] <- "Not_physically_active"
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
IPCW = ifelse(data$Y==1, 10, 1)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
names(data)[2] <- "Not_physically_active"
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
IPCW = ifelse(data$Y==1, 1000, 1)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
names(data)[2] <- "Not_physically_active"
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
SRCL_2_train_neural_network <- function(X, Y, model, lr = 0.01,
epochs = 50000, patience = 500,
plot_and_evaluation_frequency = 50, IPCW = NA) {
if (is.na(IPCW)) IPCW <- rep(1,nrow(X))
performance = model$train_performance
par(mfrow=c(1,1));par(mar=c(3,5,3,1))
for(rounds in 1:ceiling(c(epochs/plot_and_evaluation_frequency))) {
model <- SRCL_cpp_train_network_relu(x=as.matrix(X),y=as.matrix(Y),testx=as.matrix(X),testy=as.matrix(Y),
lr = lr, maxepochs  = plot_and_evaluation_frequency, W1_input = model[[1]],B1_input = model[[2]],
W2_input = model[[3]],B2_input = model[[4]], IPCW = IPCW)
performance <- c(performance,model$train_performance)
plot(performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="Performance")
if(length(performance)-which.min(performance)>patience) break
}
model$train_performance <- c(performance)
model$test_performance <- NA
return(model)
}
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
IPCW = ifelse(data$Y==1, 100, 1)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
names(data)[2] <- "Not_physically_active"
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
IPCW = ifelse(data$Y==1, 10, 1)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
names(data)[2] <- "Not_physically_active"
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
# Risk contributions
r_c <- SRCL_5_layerwise_relevance_propagation(exposure_data,model)
sum(duplicated(r_c)==FALSE)
# Clustering
groups =3
library(fastcluster)
p <- cbind(r_c)
p <- plyr::count(p)
pfreq <- p$freq
p <- p[,-c(ncol(p))]
p_h_c <- hclust(dist(p, method = "manhattan"),method = "ward.D", members=pfreq)
pclus <- cutree(p_h_c, groups)
id <- 1:nrow(r_c)
temp <- merge(cbind(id,r_c),cbind(p,pclus))
clus <- temp$pclus[order(temp$id)]
table(clus)
par(mfrow=c(1,1))
par(mar=c(5,5,5,5))
library(ggtree)
library(ggplot2)
print(ggtree(p_h_c,layout="equal_angle") +
geom_tippoint(size=sqrt(pfreq)/2, alpha=.2, color=colours[pclus])+
ggtitle("D) Dendrogram") +
theme(plot.title = element_text(size = 15, face = "bold")))
png(paste0("SCL_",run,".png"),unit="in",res=300,width = 7,height = 8)  ############## REMOVE
dev.off()
layout(matrix(c(1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6), 3, 6, byrow = TRUE))
# Performance
par(mar=c(5,5,2,0))
plot(model$train_performance, type='l',yaxs='i', ylab="Mean squared error",
xlab="Epochs",main="A) Performance")
# Model visualisation
par(mar=c(0,0,0,0))
SRCL_3_plot_neural_network(model,names(exposure_data),5/max(model[[1]]))
mtext("B)",side=3, line=2,adj = -.0001)
# AUC
library(pROC)
par(mar=c(5,5,2,0))
pred <- SRCL_4_predict_risks(exposure_data,model)
plot(roc(outcome_data,pred),print.auc=TRUE,main="C) Accuracy")
# Plot results
library(robustbase)
library(imager)
im <- load.image("dendrogram.png")
par(mar=c(0,0,0,0))
plot(im,axes=F)
# par(mar=c(4,5,3,0))
# plot(prcomp(r_c),main="PCA: Proportion of variance")
# plot(prcomp(r_c)$x[,1:2],pch=16,col=colours[clus],main="PCA: Biplot",frame.plot=FALSE)
par(mar=c(4,5,2,1))
plot(0,0,type='n',xlim=c(0,1),asp=1,ylim=c(0,1),xaxs='i',yaxs='i',
axes=FALSE,ylab="Risk",xlab="Prevalence",frame.plot=FALSE,main="E) Prevalence and mean risk of sub-groups")
axis(1,seq(0,1,.2));axis(2,seq(0,1,.2))
rect(0,0,1,1)
prev0 = 0; total = 0
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
rect(xleft = prev0,ybottom = 0,xright = prev+prev0,ytop = risk, col=colours[i])
prev0 = prev + prev0
total = total + risk * prev
}
#arrows(x0=0,x1=1,y0=median(r_c$Baseline_risk),lty=1,length=0)
arrows(x0=0,x1=1,y0=mean(r_c$Baseline_risk),lty=1,length=0)
st <- 1.5
d <- data.frame(matrix(NA, nrow=ncol(r_c)))
for (g in 1:groups) {
for (i in 1:nrow(d)) {
#    d[i,g] <- median(r_c[clus==g,i])
d[i,g] <- mean(r_c[clus==g,i])
}}
d <- t(d)
rownames(d) <- paste("Group",1:groups)
colnames(d) <- names(r_c)
par(mar=c(0,0,0,0))
plot(0,0,type='n',xlim=c(-ncol(d)-5,0),ylim=c(-nrow(d)-1,1),axes=F)
text(c(-ncol(d)):c(-1),0,rev(colnames(d)),srt=25,cex=st)
text(-ncol(d)-5,0,"F) Mean (SD) risk contributions\nby sub-group",pos=4,cex=st)
#text(-ncol(d)-2,c(-1):c(-nrow(d)),rownames(d),col=colours[1:groups],cex=st)
#par(mfrow=c(1,1))
for (i in 1:groups) {
prev <- sum(clus==i)/length(clus)
#  risk <- sum(colMedians(as.matrix(r_c[clus==i,])))
risk <- sum(colMeans(as.matrix(r_c[clus==i,])))
risk_obs <- mean(outcome_data[clus==i])
text(-ncol(d)-5,-i,paste0("Sub-group ",i,": ","n=",sum(clus==i),", e=",sum(outcome_data[clus==i]),",\nPrev=",format(round(prev*100,1),nsmall=1),"%, risk=",format(round(risk*100,1),nsmall=1),"%, excess=",
#round(prev*(risk-median(r_c$Baseline_risk))/total*100,1),
format(round(prev*(risk-mean(r_c$Baseline_risk))/total*100,1),nsmall=1),
"%,\nObs risk=",format(round(risk_obs*100,1),nsmall=1),"% (",
#                     "round(risk_obs*100),
paste0(format(round(prop.test(sum(outcome_data[clus==i]),length(t(outcome_data)[clus==i]))$conf.int*100,1),nsmall=1),collapse="-"),
"%)",
"\nSG1= ",round(mean(data$Y[data$Air_pollution==1&data$Mutation_X==1])*100,1),"%, ",
"SG2= ",round(mean(data$Y[data$Not_physically_active==1&data$LDL==1&data$Night_shifts==1])*100,1),"%"
),pos=4,col=colours[i])
}
m <- max(d)
for(g in 1:ncol(d)) { for (i in 1:nrow(d)){
value <- paste0(format(round(as.numeric(d[i,g]),2),nsmall=2),"\n(",
format(round(sd(r_c[clus==i,g]),2),nsmall=2),")")
#  value <- paste0(format(round(as.numeric(quantile(d[i,g],c(0.25,0.75))),2),nsmall=2),collapse = "-")
text(-g,-i,value,col=adjustcolor(colours[i],d[i,g]/m),cex=st*d[i,g]/m)
}}
# Data simulation
data <- SRCL_0_synthetic_data(40000) # use 40 000 to replicate the paper
IPCW = rep(1,nrow(data))
IPCW = ifelse(data$Y==1, 1, 0.1)
# Code data monotonisticly
lm(Y~.,data)
# We choose to recode Physically_active to not_Physically_active
data$Physically_active <- 1 - data$Physically_active
names(data)[2] <- "Not_physically_active"
summary(lm(Y~.,data))
exposure_data <- data[,-1]
outcome_data <- data[,1]
# Model fit
model <- SRCL_1_initiate_neural_network(inputs=ncol(exposure_data),hidden=5)
for (lr_set in c(1e-4,1e-5)) {
print(paste0("Learning rate: ",lr_set))
model <- SRCL_2_train_neural_network(exposure_data,outcome_data,model,
lr = lr_set, epochs=2000,patience = 100,plot_and_evaluation_frequency = 50,
IPCW = IPCW)
}
remove.packages("SRCL", lib="~/R/win-library/4.0")
library(SRCL)
